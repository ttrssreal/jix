diff --git a/Makefile b/Makefile
index 77bcbc0..5385d61 100644
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,7 @@
 
 include config.mk
 
-SRC = drw.c dwm.c util.c
+SRC = drw.c dwm.c util.c dbus.c
 OBJ = ${SRC:.c=.o}
 
 all: options dwm
diff --git a/config.h b/config.h
new file mode 100644
index 0000000..03bfd37
--- /dev/null
+++ b/config.h
@@ -0,0 +1,126 @@
+/* See LICENSE file for copyright and license details. */
+
+#include <X11/XF86keysym.h>
+#include "dbus.h"
+
+/* appearance */
+static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int snap      = 32;       /* snap pixel */
+static const int showbar            = 1;        /* 0 means no bar */
+static const int topbar             = 1;        /* 0 means bottom bar */
+static const char *fonts[]          = { "monospace:size=10", "Font Awesome 5 Free:pixelsize=10:antialias=true:autohint=true" };
+static const char dmenufont[]       = "monospace:size=10";
+static const char col_gray1[]       = "#222222";
+static const char col_gray2[]       = "#444444";
+static const char col_gray3[]       = "#bbbbbb";
+static const char col_gray4[]       = "#eeeeee";
+static const char col_cyan[]        = "#005577";
+static const char *colors[][3]      = {
+	/*               fg         bg         border   */
+	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
+	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+};
+
+/* tagging */
+static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+
+static const Rule rules[] = {
+	/* xprop(1):
+	 *	WM_CLASS(STRING) = instance, class
+	 *	WM_NAME(STRING) = title
+	 */
+	/* class      instance    title       tags mask     isfloating   monitor */
+	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
+	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+};
+
+/* layout(s) */
+static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const int nmaster     = 1;    /* number of clients in master area */
+static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
+
+static const Layout layouts[] = {
+	/* symbol     arrange function */
+	{ "[]=",      tile },    /* first entry is default */
+	{ "><>",      NULL },    /* no layout function means floating behavior */
+	{ "[M]",      monocle },
+};
+
+/* key definitions */
+#define MODKEY Mod1Mask
+#define TAGKEYS(KEY,TAG) \
+	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+
+/* helper for spawning shell commands in the pre dwm-5.0 fashion */
+#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
+
+/* commands */
+static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static const char *termcmd[]  = { "alacritty", NULL };
+static const char *sscmd[]  = { "flameshot", "gui", NULL };
+static const char *bt_concmd[]  = { "bluetooth-connect", NULL };
+
+static const Key keys[] = {
+	/* modifier                     key        function        argument */
+	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
+	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
+	{ MODKEY,                       XK_b,      togglebar,      {0} },
+	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
+	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
+	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
+	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
+	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
+	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
+	{ MODKEY,                       XK_Return, zoom,           {0} },
+	{ MODKEY,                       XK_Tab,    view,           {0} },
+	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
+	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
+	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
+	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,                       XK_space,  setlayout,      {0} },
+	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
+	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
+	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
+	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
+	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
+	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	TAGKEYS(                        XK_1,                      0)
+	TAGKEYS(                        XK_2,                      1)
+	TAGKEYS(                        XK_3,                      2)
+	TAGKEYS(                        XK_4,                      3)
+	TAGKEYS(                        XK_5,                      4)
+	TAGKEYS(                        XK_6,                      5)
+	TAGKEYS(                        XK_7,                      6)
+	TAGKEYS(                        XK_8,                      7)
+	TAGKEYS(                        XK_9,                      8)
+	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+	{ 0,             				XF86XK_AudioRaiseVolume,   change_vol,     {.i = +5 } },
+	{ 0,             				XF86XK_AudioLowerVolume,   change_vol,     {.i = -5 } },
+	{ 0,             				XF86XK_AudioMute,	   	   toggle_mute,    {0} },
+	{ MODKEY,                       XK_o,      spawn,          {.v = bt_concmd }},
+	{ MODKEY,             			XK_s,	   spawn,    	   {.v = sscmd } },
+};
+
+/* button definitions */
+/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
+static const Button buttons[] = {
+	/* click                event mask      button          function        argument */
+	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
+	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
+	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
+	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
+	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
+	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
+	{ ClkTagBar,            0,              Button1,        view,           {0} },
+	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
+	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
+	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+};
+
diff --git a/config.mk b/config.mk
index ba64d3d..fe1dba3 100644
--- a/config.mk
+++ b/config.mk
@@ -22,8 +22,8 @@ FREETYPEINC = /usr/include/freetype2
 #MANPREFIX = ${PREFIX}/man
 
 # includes and libs
-INCS = -I${X11INC} -I${FREETYPEINC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
+INCS = -I${X11INC} -I${FREETYPEINC} $(shell pkg-config --cflags dbus-1)
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -ldbus-1
 
 # flags
 CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE=700L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff --git a/dbus.c b/dbus.c
new file mode 100644
index 0000000..0a7eb9d
--- /dev/null
+++ b/dbus.c
@@ -0,0 +1,40 @@
+#include <dbus/dbus.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+static DBusConnection *connection;
+static DBusError error;
+
+void dbus_setup() {
+    dbus_error_init(&error);
+    connection = dbus_bus_get(DBUS_BUS_SESSION, &error);
+    if (dbus_error_is_set(&error)) {
+        fprintf(stderr, "Couldn't connect to session bus: %s\n", error.message);
+        dbus_error_free(&error);
+        exit(1);
+    }
+}
+
+void dbus_update_sb() {
+    DBusMessage *message;
+    DBusPendingCall *pending;
+
+    // A status bar service with a method Update to refresh the status bar.
+    message = dbus_message_new_method_call(
+        "org.user.StatusBar",
+        "/org/user/StatusBar",
+        "org.user.StatusBar",
+        "Update"
+    );
+
+    dbus_connection_send_with_reply(connection, message, &pending, -1);
+
+    if (pending == NULL) {
+        fprintf(stderr, "Could not send D-Bus method call.\n");
+    }
+
+    dbus_connection_flush(connection);
+
+    dbus_message_unref(message);
+    dbus_pending_call_unref(pending);
+}
\ No newline at end of file
diff --git a/dbus.h b/dbus.h
new file mode 100644
index 0000000..463b4a4
--- /dev/null
+++ b/dbus.h
@@ -0,0 +1,4 @@
+#pragma once
+
+void dbus_setup();
+void dbus_update_sb();
\ No newline at end of file
diff --git a/dwm.c b/dwm.c
index f1d86b2..06c4d90 100644
--- a/dwm.c
+++ b/dwm.c
@@ -233,6 +233,8 @@ static int xerror(Display *dpy, XErrorEvent *ee);
 static int xerrordummy(Display *dpy, XErrorEvent *ee);
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
+static void change_vol(const Arg *arg);
+static void toggle_mute();
 
 /* variables */
 static const char broken[] = "broken";
@@ -2140,6 +2142,27 @@ zoom(const Arg *arg)
 	pop(c);
 }
 
+void
+change_vol(const Arg *arg)
+{
+	int chg = arg->i;
+	char *cmd[] = {"amixer", "-D", "pipewire", "sset", "Master", NULL, NULL};
+	char sign = (chg & (1 << 31)) ? '-' : '+';
+	char delta[10];
+	sprintf(delta, "%d%%%c", abs(chg), sign);
+    cmd[5] = delta;
+    spawn(&(Arg){.v = cmd});
+	dbus_update_sb();
+}
+
+void
+toggle_mute()
+{
+	static const char *toggle_cmd[] = {"amixer", "-D", "pipewire", "set", "Master", "toggle", NULL};
+    spawn(&(Arg){.v = toggle_cmd});
+	dbus_update_sb();
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -2153,6 +2176,7 @@ main(int argc, char *argv[])
 		die("dwm: cannot open display");
 	checkotherwm();
 	setup();
+	dbus_setup();
 #ifdef __OpenBSD__
 	if (pledge("stdio rpath proc exec", NULL) == -1)
 		die("pledge");
